# .github/workflows/build-frr-grpc.yml
name: Build FRR (amd64 native + arm64 via QEMU buildx)

on:
  workflow_dispatch:
    inputs:
      frr_version:
        description: "FRR git release (e.g. 10.3.1)"
        required: true
        default: "10.3.1"

env:
  YANG_VER: "2.1.148-0.2"
  YANG_BASE: "https://launchpad.net/ubuntu/+archive/primary/+files"
  PKG_VER: ${{ inputs.frr_version }}
  FRR_VERSION: frr-${{ inputs.frr_version }}  

################################################################################
# JOB 1 – native amd64 build
################################################################################
jobs:
  build-amd64:
    runs-on: ubuntu-24.04
      
    steps:
      - uses: actions/checkout@v4
        with:
          repository: FRRouting/frr
          ref: ${{ env.FRR_VERSION }}

      - name: Install build deps (amd64)
        run: |
          sudo add-apt-repository -y universe
          sudo apt update
          sudo apt install -y \
            build-essential autoconf automake libtool pkg-config \
            cmake ninja-build \
            libreadline-dev libjson-c-dev libsnmp-dev libcap-dev \
            python3-dev bison flex \
            libgrpc-dev libgrpc++-dev protobuf-compiler-grpc \
            libprotobuf-dev protobuf-compiler \
            libgrpc-dev libprotobuf-dev protobuf-c-compiler \
            libprotobuf-c-dev libelf-dev wget checkinstall

          # libyang 2.1.148 (amd64)
          wget -q ${YANG_BASE}/libyang2t64_${YANG_VER}_amd64.deb
          wget -q ${YANG_BASE}/libyang2-dev_${YANG_VER}_amd64.deb
          sudo apt install -y ./libyang2t64_${YANG_VER}_amd64.deb \
                              ./libyang2-dev_${YANG_VER}_amd64.deb

      - name: Bootstrap
        run: |
          ./bootstrap.sh
          git submodule update --init --recursive

      - name: Configure & compile (amd64)
        run: |
          mkdir build && cd build
          ../configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \
                       --enable-grpc --enable-vtysh --disable-static \
                       --with-pkg-extra-version="-github-${{ github.run_number }}"
          make -j"$(nproc)"

      - name: Package .deb (amd64)
        run: |
          cd build
          sudo mkdir -p /usr/lib/frr/modules /usr/include/frr
          sudo checkinstall -D --install=no -y \
            --pkgname=frr --pkgversion="$PKG_VER" --pkgrelease=1 \
            --arch=amd64 --pakdir=$GITHUB_WORKSPACE/pkg-amd64 \
            make install

      - uses: actions/upload-artifact@v4
        with:
          name: frr-amd64
          path: pkg-amd64/*.deb

################################################################################
# JOB 2 – arm64 build via QEMU + Buildx
################################################################################
  build-arm64:
    runs-on: [self-hosted, macos, arm64]

    steps:
      # 1) workflow reposu (Dockerfile burada)
      - uses: actions/checkout@v4

      # 2) FRR kaynak kodunu alt klasöre çek
      - name: Checkout FRR upstream
        uses: actions/checkout@v4
        with:
          repository: FRRouting/frr
          ref: ${{ env.FRR_VERSION }}
          path: frr-src
          submodules: recursive
          fetch-depth: 0 

      # 3) Dockerfile'ı context içine kopyala
      - name: Copy Dockerfile into build context
        run: cp Dockerfile.arm64 frr-src/

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
          
      - name: Build arm64 package
        uses: docker/build-push-action@v5
        with:
          context: ./frr-src            # ← artık Dockerfile burada
          file: Dockerfile.arm64        # ← context içindeki dosya
          platforms: linux/arm64
          outputs: type=local,dest=out
          push: false
          build-args: |
            FRR_VERSION=${{ env.FRR_VERSION }}
            PKG_VER=${{ env.PKG_VER }}
            YANG_VER=${{ env.YANG_VER }}
            YANG_BASE=${{ env.YANG_BASE }}
          tags: frr-build:arm64

      - name: Collect .deb
        run: |
          mkdir pkg-arm64
          mv out/*.deb pkg-arm64/

      - uses: actions/upload-artifact@v4
        with:
          name: frr-arm64
          path: pkg-arm64/*.deb

################################################################################
# JOB 3 – optional GitHub release if run from a tag
################################################################################
  release:
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-latest

    env:
      TAG_NAME: frr-${{ inputs.frr_version }}   # frr-10.3.1 vb.

    steps:
      # repo klonu tag ekleyebilmek için gerekli
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0           # tüm geçmiş + tag’ler

      # tag yoksa oluştur
      - name: Ensure tag exists
        run: |
          if ! git rev-parse -q --verify "refs/tags/${TAG_NAME}"; then
            echo "::notice::Creating tag ${TAG_NAME}"
            git config user.name  "github-actions"
            git config user.email "actions@github.com"
            git tag -a "${TAG_NAME}" -m "Automatic tag for FRR ${TAG_NAME#frr-}"
            git push origin "${TAG_NAME}"
          else
            echo "::notice::Tag ${TAG_NAME} already present"
          fi

      # .deb artefact’larını içe aktar
      - uses: actions/download-artifact@v4
        with:
          pattern: frr-*
          merge-multiple: true
          path: release

      # Release’i oluştur / güncelle
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "FRR ${{ inputs.frr_version }}"
          generate_release_notes: true
          files: release/*.deb
